<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cdu.cyj.dao.CommentDao">

    <resultMap id="BaseResultMap" type="cdu.cyj.domain.entity.Comment">
        <!--@Table table_comment-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="articleId" column="article_id" jdbcType="INTEGER"/>
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="level" column="level" jdbcType="INTEGER"/>
        <result property="fatherId" column="father_id" jdbcType="INTEGER"/>
        <result property="type" column="type" jdbcType="INTEGER"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
        <result property="rootId" column="root_id" jdbcType="INTEGER"/>
        <result property="toCommentUserId" column="to_comment_user_id" jdbcType="INTEGER"/>
        <result property="toCommentId" column="to_comment_id" jdbcType="INTEGER"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select
          id, content, article_id, user_id, level, father_id, type, status, root_id, to_comment_user_id, to_comment_id, create_by, create_time, update_by, update_time
        from table_comment
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select
          id, content, article_id, user_id, level, father_id, type, status, root_id, to_comment_user_id, to_comment_id, create_by, create_time, update_by, update_time
        from table_comment
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="content != null and content != ''">
                and content = #{content}
            </if>
            <if test="articleId != null">
                and article_id = #{articleId}
            </if>
            <if test="userId != null">
                and user_id = #{userId}
            </if>
            <if test="level != null">
                and level = #{level}
            </if>
            <if test="fatherId != null">
                and father_id = #{fatherId}
            </if>
            <if test="type != null">
                and type = #{type}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="rootId != null">
                and root_id = #{rootId}
            </if>
            <if test="toCommentUserId != null">
                and to_comment_user_id = #{toCommentUserId}
            </if>
            <if test="toCommentId != null">
                and to_comment_id = #{toCommentId}
            </if>
            <if test="createBy != null">
                and create_by = #{createBy}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateBy != null">
                and update_by = #{updateBy}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
          id, content, article_id, user_id, level, father_id, type, status, root_id, to_comment_user_id, to_comment_id, create_by, create_time, update_by, update_time
        from myBlog.table_comment
    </select>
    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from table_comment
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="content != null and content != ''">
                and content = #{content}
            </if>
            <if test="articleId != null">
                and article_id = #{articleId}
            </if>
            <if test="userId != null">
                and user_id = #{userId}
            </if>
            <if test="level != null">
                and level = #{level}
            </if>
            <if test="fatherId != null">
                and father_id = #{fatherId}
            </if>
            <if test="type != null">
                and type = #{type}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="rootId != null">
                and root_id = #{rootId}
            </if>
            <if test="toCommentUserId != null">
                and to_comment_user_id = #{toCommentUserId}
            </if>
            <if test="toCommentId != null">
                and to_comment_id = #{toCommentId}
            </if>
            <if test="createBy != null">
                and create_by = #{createBy}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateBy != null">
                and update_by = #{updateBy}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
        </where>
    </select>
    <select id="queryAllByStatusAndArticleIdAndRootId" resultMap="BaseResultMap">
        SELECT * FROM table_comment
        WHERE status = #{status}
        AND
        article_id = #{articleId}
        AND
        root_id = #{rootId}
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into table_comment(content, article_id, user_id, level, father_id, type, status, root_id, to_comment_user_id, to_comment_id, create_by, create_time, update_by, update_time)
        values (#{content}, #{articleId}, #{userId}, #{level}, #{fatherId}, #{type}, #{status}, #{rootId}, #{toCommentUserId}, #{toCommentId}, #{createBy}, #{createTime}, #{updateBy}, #{updateTime})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into table_comment(content, article_id, user_id, level, father_id, type, status, root_id, to_comment_user_id, to_comment_id, create_by, create_time, update_by, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.content}, #{entity.articleId}, #{entity.userId}, #{entity.level}, #{entity.fatherId}, #{entity.type}, #{entity.status}, #{entity.rootId}, #{entity.toCommentUserId}, #{entity.toCommentId}, #{entity.createBy}, #{entity.createTime}, #{entity.updateBy}, #{entity.updateTime})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into table_comment(content, article_id, user_id, level, father_id, type, status, root_id, to_comment_user_id, to_comment_id, create_by, create_time, update_by, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.content}, #{entity.articleId}, #{entity.userId}, #{entity.level}, #{entity.fatherId}, #{entity.type}, #{entity.status}, #{entity.rootId}, #{entity.toCommentUserId}, #{entity.toCommentId}, #{entity.createBy}, #{entity.createTime}, #{entity.updateBy}, #{entity.updateTime})
        </foreach>
        on duplicate key update
        content = values(content),
        article_id = values(article_id),
        user_id = values(user_id),
        level = values(level),
        father_id = values(father_id),
        type = values(type),
        status = values(status),
        root_id = values(root_id),
        to_comment_user_id = values(to_comment_user_id),
        to_comment_id = values(to_comment_id),
        create_by = values(create_by),
        create_time = values(create_time),
        update_by = values(update_by),
        update_time = values(update_time)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update table_comment
        <set>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            <if test="articleId != null">
                article_id = #{articleId},
            </if>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="level != null">
                level = #{level},
            </if>
            <if test="fatherId != null">
                father_id = #{fatherId},
            </if>
            <if test="type != null">
                type = #{type},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="rootId != null">
                root_id = #{rootId},
            </if>
            <if test="toCommentUserId != null">
                to_comment_user_id = #{toCommentUserId},
            </if>
            <if test="toCommentId != null">
                to_comment_id = #{toCommentId},
            </if>
            <if test="createBy != null">
                create_by = #{createBy},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from table_comment where id = #{id}
    </delete>

</mapper>

